generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id String @id @default(uuid())

  firstName        String
  lastName         String
  gender           String?
  nidNumber        String?
  mobileNumber     String?
  email            String        @unique
  password         String        @unique
  role             String        @default("Candidate")
  portfolioUrl     String?
  facebookUrl      String?
  linkedinUrl      String?
  jobType          JobType?
  presentAddress   String?
  permanentAddress String?
  careerObjective  String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  educations       String?
  experience       String?
  applications     Application[]
  savedJobs        SavedJob[]

  @@map("candidates")
}

model Employee {
  id                   String   @id @default(uuid())
  companyName          String
  phoneNumber          String?
  email                String   @unique
  password             String   @unique
  role                 String   @default("Employe")
  website              String?
  facebookUrl          String?
  twitterUrl           String?
  linkedinUrl          String?
  companySize          String?
  tin                  String?
  tradeLicenseNumber   String?
  companyLogo          String?
  address              String?
  description          String?
  recruiterName        String?
  recruiterDesignation String?
  recruiterNumber      String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  jobs                 Job[]

  @@map("employes")
}

model Job {
  id                  String        @id @default(uuid())
  title               String
  positionSummery     String
  jobResponsibilities String
  qualification       String
  requiredSkill       String
  education           String
  benefits            String
  location            String
  companyName         String
  salary              String
  vacancy             Int
  jobCategory         JobCategory
  deadline            String
  type                Type
  employeeId          String
  employee            Employee      @relation(fields: [employeeId], references: [id])
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  applications        Application[]
  savedJobs           SavedJob[]
  comments            Comment[]

  @@map("jobs")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobId     String
  job       Job      @relation(fields: [jobId], references: [id])
}

model SavedJob {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  jobId       String
  job         Job       @relation(fields: [jobId], references: [id])

  @@map("savedjob")
}

model Application {
  id String @id @default(uuid())

  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  jobId       String
  job         Job       @relation(fields: [jobId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("applications")
}

enum JobType {
  FullTime
  Internship
  PartTime
}

enum JobCategory {
  SoftwareDevelopment
  WebDevelopment
  DataScience
  NetworkAdministration
  CyberSecurity
  DatabaseAdministration
  DevOps
  CloudComputing
  ITConsulting
  SystemAnalysis
  UIUXDesign
  QualityAssurance
  ITSupport
  BusinessIntelligence
  MobileAppDevelopment
}

enum Type {
  FullTime
  PartTime
  Remote
}
