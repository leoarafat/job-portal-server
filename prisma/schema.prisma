generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id           String        @id @default(uuid())
//   email        String        @unique
//   password     String
//   fullName     String
//   userType     UserType
//   createdAt    DateTime      @default(now())
//   updatedAt    DateTime      @updatedAt
//   candidate    Candidate?
//   employee     Employee?
//   jobs         Job[]
//   savedJobs    SavedJob[]
//   applications Application[]

//   @@map("users")
// }

model Candidate {
  id String @id @default(uuid())

  firstName        String
  lastName         String
  gender           String?
  nidNumber        String?
  mobileNumber     String?
  email            String        @unique
  password         String        @unique
  role             UserType
  portfolioUrl     String?
  facebookUrl      String?
  linkedinUrl      String?
  jobType          String?
  presentAddress   String?
  permanentAddress String?
  careerObjective  String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  educations       String?
  experience       String?
  Application      Application[]
  SavedJob         SavedJob[]

  @@map("candidates")
}

model Employee {
  id                   String   @id @default(uuid())
  companyName          String
  phoneNumber          String?
  email                String   @unique
  password             String   @unique
  role                 UserType
  website              String?
  facebookUrl          String?
  twitterUrl           String?
  linkedinUrl          String?
  companySize          String?
  tin                  String?
  tradeLicenseNumber   String?
  companyLogo          String?
  address              String?
  description          String?
  recruiterName        String?
  recruiterDesignation String?
  recruiterNumber      String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  Job                  Job[]

  @@map("employes")
}

model Job {
  id                  String        @id @default(uuid())
  title               String
  positionSummery     String
  jobResponsibilities String
  qualification       String
  requiredSkill       String
  education           String
  benefits            String
  location            String
  companyName         String
  salary              String
  vacancy             Int
  jobCategory         String
  deadline            DateTime
  type                String // Full-time, Part-time, Remote, etc.
  employeeId          String
  employee            Employee      @relation(fields: [employeeId], references: [id])
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  Application         Application[]
  SavedJob            SavedJob[]

  @@map("jobs")
}

model SavedJob {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  jobId       String
  job         Job       @relation(fields: [jobId], references: [id])

  @@map("savedjob")
}

model Application {
  id String @id @default(uuid())

  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  jobId       String
  job         Job       @relation(fields: [jobId], references: [id])
  status      String // Submitted, In Review, Accepted, Rejected, etc.
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("applications")
}

enum UserType {
  Candidate
  Employee
}
